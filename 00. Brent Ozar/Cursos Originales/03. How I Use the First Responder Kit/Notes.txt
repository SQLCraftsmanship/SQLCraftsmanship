
sp_BlitzCache @SortOrder = 'CPU'

sp_BlitzCache @SortOrder = 'READS'

sp_BlitzCache @SortOrder = 'duration'


https://training.brentozar.com/courses/1335658/lectures/30673559
https://training.brentozar.com/courses/how-i-use-the-first-responder-kit/lectures/30673559    minut 12>34


sp_BlitzFirst
	  @SinceStartup = 1
	, @OutPutType = 'Top10'
	go

sp_BlitzCache
	@SortOrder = 'CPU'
GO

sp_BlitzCache
	@SortOrder = 'DURATION'

----------------------------------------------------------------------------------------

004 Server


sp_BlitzFirst
	@SinceStartup = 1
	, @OutputType = 'Top10'

sp_BlitzCache
	@SortOrder = 'CPU'

You have 3842 plans in your cache, and 77.00% are single use plans, meaning SQL Server thinks it is seeing a lot of "new" queries and creating plans for them. 
Forced Parameterization and/or Optimize For Ad Hoc Workloads may fix the issue.
To find troublemakers, use: EXEC sp_BlitzCache @SortOrder = 'query hash'; 

<MissingIndexes>

/* 
The Query Processor estimates that implementing the following index could improve query cost (1.8694)
by 85.3564% for 255 executions of the query over the last 0 hours.
*/

/* 
USE [ExpressLane]
GO

CREATE NONCLUSTERED INDEX ix_ClientId_ScanningTypeId_SortationGroupId_Includes
 ON [dbo].[SortContainer] ([ClientId], [ScanningTypeId], [SortationGroupId])
INCLUDE ([CreatedAt], [FinalClosedAt], [MassSortTransferStatusId], [ScanStationId], [SortContainerId], [SortContainerKey], [SortContainerStatusId]) WITH (FILLFACTOR=100, ONLINE=?, SORT_IN_TEMPDB=?, DATA_COMPRESSION=?);
GO
*/

</MissingIndexes>

<MissingIndexes>

/* 
The Query Processor estimates that implementing the following index could improve query cost (23.623)
by 48.4385% for 13 executions of the query over the last 0 hours.
*/

/* 
USE [ExpressLane]
GO

CREATE NONCLUSTERED INDEX ix_SortContainerStatusId_Includes
 ON [dbo].[SortContainer] ([SortContainerStatusId])
INCLUDE ([ClientId], [CreatedAt], [SortationGroupId], [SortationId], [SortContainerId]) WITH (FILLFACTOR=100, ONLINE=?, SORT_IN_TEMPDB=?, DATA_COMPRESSION=?);
GO
*/

</MissingIndexes>
<MissingIndexes>

/* 
The Query Processor estimates that implementing the following index could improve query cost (36.6857)
by 70.7173% for 7 executions of the query over the last 0 hours.
*/

/* 
USE [ExpressLane]
GO

CREATE NONCLUSTERED INDEX ix_SortContainerStatusId_Includes
 ON [dbo].[SortContainer] ([SortContainerStatusId])
INCLUDE ([ClientId], [SortationGroupId], [SortationId], [SortContainerId]) WITH (FILLFACTOR=100, ONLINE=?, SORT_IN_TEMPDB=?, DATA_COMPRESSION=?);
GO
*/

</MissingIndexes>


EXEC sp_BlitzCache @SortOrder = 'query hash';

You have 4234 plans in your cache, and 83.00% are single use plans, meaning SQL Server thinks it is seeing a lot of "new" queries and creating plans for them. 
Forced Parameterization and/or Optimize For Ad Hoc Workloads may fix the issue.To find troublemakers, use: EXEC sp_BlitzCache @SortOrder = 'query hash'; 


You have 5657 plans in your cache, and 80.00% are duplicates with more than 5 entries, meaning similar queries are generating the same plan repeatedly. 
Forced Parameterization may fix the issue. To find troublemakers, use: EXEC sp_BlitzCache @SortOrder = 'query hash'; 
