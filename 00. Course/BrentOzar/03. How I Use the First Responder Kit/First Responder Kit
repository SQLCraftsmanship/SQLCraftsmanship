# Brent Ozar Course Notes

<style>
r { color: red }
o { color: Orange }
g { color: Green }
lg { color: lightgreen }
b { color: Blue }
lb { color: lightblue }
</style>

```sql
```  

* Initial Training Page
  
  https://training.brentozar.com/courses/

---

## 1. First Responder Kit

* Index
  - [How to install it](#How-to-install-it)
  - [Intro](#Intro)
  - [How to work with First Responder Kit](#How-to-work-with-First-Responder-Kit)
  - [How I execute the sp_XXX](#How-I-execute-the-sp_XXX)
    - [sp_Blitz](#sp_Blitz)
  - [NonCluster Index](#NonCluster-Index)
  - [Key lookups](#Key-lookups)
  - [The tipping point](#The-tipping-point)
  - [How the engine chooses between plans](#How-the-engine-chooses-between-plans)
  - [Cost-based query optimization](#Cost-based-query-optimization)
  - [How statistics come into play](#How-statistics-come-into-play)
  - [How your query syntax affects all this](#How-your-query-syntax-affects-all-this)
  - [How included columns mitigate these problems](#How-included-columns-mitigate-these-problems)
  
---
## 2. How to install it

- From GitHub
 https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit

- From PowerShell
 Install-Module dbatools

  $cred = 'SA'
  Install-DbaFirstResponderKit -SqlInstance MSSQLSERVER -Database master -SqlCredential $cred -Force -Verbose

## 3. Intro

1. Do a server-wide health check with sp_Blitz. The pripority 50 findings.
2. Do a performance check with sp_BlitzFirst(and set it up to log data to tables every 15 min). Prioritized list of wait types.
3. Find the queries causing your top waits by using sp_BlitzCacheâ€™s @SortOrderparameter and see the 3 or 4 queries causing problems.
4. Check sp_BlitzIndex @GetAllDatabases = 1 to see if index changes can help a lot, fastNow, paint the big picture. A rough idea of what tables need index help first

## 4. How to work with First Responder Kit

1. Day 1, Morning Rapidly assess a single SQL server, database indexes, queries running.
2. Day 1, afternoon and Day 2, write findings.
3. Day 2, afternoon, deliver findings and training to get the team out of the emergency quicly.

## How I execute the sp_XXX

1. sp_Blitz (Server-wide health check)

   - sp_Blitz
     - When to run it?
       - When taking over a new SQL Server
       - Before signing off that a server is ready for production
       - When you come back from vacations

     - Which parameters use more?
       - @CheckServerInfo = 1
       - @CheckUserDatabaseObjects = 0
         With this we avoid to check the internal objects of the user databases
       - @OutputDatabaseName   = 'DBATools'
           , @OutputSchemaName = 'dbo'
           , @OutputTableName  = 'Blitz'
           , @OutputServerName = 'MyCentralServer'
       - @SkiChecksServer/Database/Schema/Table
         To use this you have to create a table and say wich CheckID you don't want to check

    - Ways to execute it
      - First
        <r>sp_Blitz

        We execute this mode only when there is an emergency, someone called you and you sent this to be run for another person.

      - Second
        <r>sp_Blitz
          <r>  @CheckServerInfo = 1
          <r>, @CheckDatabaseObjects = 0

        We execute this when we are CONSULTANTS.

2. sp_BlitzFirst (Performance check)

   - How this work
    Take a snapshot, wait for 5 second and take another snapshot. Then compare the result and give you the info.

   - Uses Cases
      - Online check info
        - @ExpertMode = 1, @Seconds = 5 (or 60 seconds)
          * Result 1
            Show the queries that were running when sp_BlitzFirst was running
          * Result 2
            Priority points
          * Result 3
            Top 10 Waits
          * Result 4
            R/W that happens on that 5 seconds
          * Result 5
            Perfom counters. Never use it
          * Result 6
            Show the queries that were running when sp_BlitzFirst was finishing

      - History info
        Creating a Job and Saving the info into a table.
        If you wanna know what is happening rigth now you can run this with 60 seconds parameters and check the first 3 results.
        Every 15 minutes execute this JOB.

        ![alt text](Images/image.png)
          
        You can log only the result that you want. On the image we are seeing everything just for test. But you can filter wich result do you wanna save.

        The sp_BlitzFirst has a parameter name @OutputTableRetentionDays TINYINT = 7. This is the amount of days retention information. If you use the point before.

        There is a _DELTA view for each result. Example, WAITS in SQL are cumulative from the last time that SQL Server was reboot so if you wanna check the time WAITS delta you have to check this view.

        <r>There is a PowerBI Dashboard on the deprecated folder on Brent Ozar Github. He didn't gave support because he is not a PowerBI specialist. So, we can dedicate some minutes a week and check this Dashboard.</r>

   - Ways to execute it
      - First
        
        <r>sp_BlitzFirst

        We execute this mode only when there is an emergency, someone called you and you sent this to be run for another person.

      - Second
        
        <r>sp_BlitzFirst
          <r>  @expertMode = 1
          <r>, @Seconds    = 60

        The parameter @expertMode returns more results
        - Result 1
          Show the queries that were running when sp_BlitzFirst was running
        - Result 2
          Priority List, always check the Priority 1
        - Result 3
          Top 10 Waits
        - Result 4 to 7
          General Info

      - Third
        
        <r>sp_BlitzFirst
          <r> @SinceStartUp = 1
        
        This parameter shows the belows columns:
        - Hours Sample columns        = amount of SQL Server has been up.
        - Thread Time (Hours) columns = amount of SQL Server queries has been running. Use Thread name because maybe the SQL Server
                                      has been running in parallel some queries.
        - Wait_Type columns           = On wich waits the SQL Server has been waiting for.

      - Fourth
        
        <r>sp_BlitzFirst
          <r>  @SinceStartUp = 1
          <r>, @OutputType   = 'Top10'

        If hours Sample > 24 and top Wait > 24hs check it.
        We compare columns [Hour Sample] vs [Wait Time(hours)]. This tell you how many hours the SQL Server waited in total.
        Finally we check the column [Per Core Per Hour] if it's 0.0 (cero) it's okay if not we have to check the WAIT.        

      - Fifth
        
        <r>sp_BlitzFirst

          <r>   @OutputDatabaseName = 'DBA'

          <r> , @OutputSchemaName   = 'dbo'

          <r> , @OutputTableName    = 'BlitzFirst'

          <r> , @OutputTableNameFileStats = 'BlitzFirst_FileStats'

          <r> , @OutputTableNamePerformStats = 'BlitzFirst_PerformStats'

          <r> , @OutputTableNameWaitStats = 'BlitzFirst_WaitStats'

          <r> , @OutputTableNameBlitzCache = 'BlitzFirst_BlitzCache'

          <r> , @OutputTableNameBlitzWho = 'BlitzFirst_BlitzWho'

          <r>This way is use when you want to create a Job to collect the info running every 15 minutes and save it locally on tables.
          <r>This also create views with DELTA info.



   - Working with sp_BlitzFirst
      - Example 1
        
        ![alt text](Images/image-2.png)

        On this case the problem is on paralelism and we have to check the Cost Threshold is at 50+ and MAXDOP is at 8-16 depending on
        MS recs: brentozar.com/go/cxpacket

        The convination of the 4 first wait shows that your queries are reading a lot. Tha is why the SQL is executing paralelism. So,
        execute:

        sp_BlitzIndex @GetAllDatabases = 1, focus on high value missing indexes

        sp_BlitzCache @SortOrder = 'reads'
          
      - Example 2

        ![alt text](Images/image-3.png)

        On this case you have to update the SQL SP and CU. MS split the parallelism waits on two but here you are seeing only one.

        Also, check the amount of memory. The second wait means that you are reading lot of information but the [Avg ms Per Wait] column shows a good numbers. So, maybe you have only 16GB of Memory. You have to update this so that the SQL can alocate the info into memory and avoid going to disk.

      - Example 3
        
        ![alt text](Images/image-4.png)

        In this case the parallelism is trying to use lot of CPU. So, make sure CTFP and MAXDOP are set at good per MS and brentozar.com/go/cxpaket and then run sp_BlitzCache @SortOrder = 'CPU'

      - Example 4

        ![alt text](Images/image-5.png)
          
        Look at Dynamic CRM docs, can you turn on RCSI? Be sure your TEMPDB is on fast local solid stage storage
        
      - Example 5
        ![alt text](Images/image-6.png)

        In this case your SQL is using to much CPU. At the same time we don't see any Paralellism so maybe the MAXDOP is = 1 or maybe the queries are using some hints to not parallelism.

        Considering raising MAXDOP and low CTFP

        sp_BlitzCache @SortOrder = 'CPU'

      - Example 6
       
        ![alt text](Images/image-7.png)

        The problem could be that the second server is to slow. We have to execute the sp_BlitzFirst on the secondary server also.

      - Example 7
       
        ![alt text](Images/image-8.png)

        In this example the first 3 are okay because the time is one to one that means that the SQL has been running for 632.1 hours and at the same time waiting for 633.1 is almost one to one so no problem.

        The four wait FT_IFTSHC_MUTEX is related to Full text in memoty oltp ...

      - Example 8

        ![alt text](Images/image-9.png)

        In this case of course we have to see what's going on with service brokers but also the convination of the waits 4, 5 and 6 shows that the sql say that some queries are running in paralallel but there is one that is not and that one is delaying the rest. It looks in parallel on the execution plan but is not. Check the Index Spool (Eager Spool)

3. sp_BlitzCache

   - Now that you've learned your SQL Server's top bottleneck with sp_Blitz and sp_BlitzFirst, let's find the queries causing that bottleneck.

   - The top 6 most common wait stats:
     - <r>**CXPACKET/CXCONSUMER/LATCH_EX:**

       Queries going parallel to read a lot of data or do a lot of CPU work. Sort by CPU and by READS.
       Set CTF & MAXDOP to goog number default www.brentozar.com/go/cxpacket

     - <r>**LCK%:**

       Look for long-running queries. Sort by DURATION, and look for the warning of "Long Running, Low CPU.". That's probably a query being blocked.

       Look for aggressive indexes: <g>sp_BlitzIndexes @GetAllDatabases = 1

     - <r>**PAGEIOLATCH:**

       Reading data pages that aren't cached in RAM. Sort by READS.

       Look for queries reading a lot of data: <g>sp_BlitzFirst @SortOrder = 'READS'
  
       Look for high-value missing indexes: <g>sp_BlitsIndex @GetAllDatabases = 1

     - <r>**RESOURCE_SEMAPHORE:**
       Queries can't get enough workspace memory to start running.
       
       Sort by MEMORY GRANT, although that isn't available in older versions of SQL.

       <g>sp_BlitzFirst @SortOrder = 'MEMORY GRANT'

     - <r>**SOS_SCHEDULER_YIELD:**
       CPU pressure, so sort by CPU.

       Look for queries using high CPU: <g>sp_BlitsCache @SortOrder = 'CPU'

     - <r>**WRITELOG / HARD_SYNC_COMMIT:**
       Writing to the transaction log for delete/update/insert (DUI) work. Sort by WRITES.

       Queries doing lot of writes: <g>sp_BlitzCache @SortOrder = 'WRITES'

     - <r>**ASYNC_NETWORK_IO:**
       Check mastering Server Tuning

    **WARNING**

    <r>**You can't trust on the first result if you have Priority 1 on the second result. Always first solve the priority 1 on the second
    result and the work on the first result set**

   - Working with sp_BlitzFirst
     - Example 1

        <g>sp_BlitzCache
          @SortOrder = 'duplicates'

          This is going to show you if you have a query that is being executed with different names e.g

          SELECT * FROM dbo.Users WHERE Displayname = 'Brent Ozar'

          SELECT * FROM dbo.Users WHERE Displayname = 'Lady Gaga'

     - Example 2

        <g>sp_BlitzCache
          @SortOrder = 'recent compilations'

     - Example 3

        <g>sp_BlitzCache
          @Sortorder   = 'reads'
        , @MinutesBack = 90

          This will give you the queries that runs in the last 90 minutes

     - Example 4

        <g>sp_BlitzCache
          @SortOrder = 'duration'
        
        This will give you all the queries by duration but this is cumulative.

        <g>sp_BlitzCache
          @SortOrder = 'avg duration'

        This is better because show you the AVG execution by query.

     - Example 5

          <g>sp_BlitzCache
                @SortOrder    = 'reads'
              , @SkipAnalysis = 1
              , @Top          = 50

      <r>**Parameter @SkipAnalysis is not going to show you info into the Warning columns. So, the result is much faster but you have to know how to solve the performance on each line whitout suggestion on the warning column.**

   - Learn Note
    
      **MINUTE 25**
      **ALTER DATABASE SCOPED CONFIGURATION SET LASY_QUERY_PLAN_STATS = ON;**
      **This is new on SQL 2019. You can use only if you are workfing on a real problem. Set on servers where you are not running more than 100 queries per second or minutes, etc**
      **PARAMETERS**
      **@DurationFilter**
      **@OnlyQueryHashes, to tune only one query that you know is the problem**
      **@IgnoteQueryHashes, to ignore the query that you alredy know is the problem**

   - Exercise
    If you want to see examples of different warnings that sp_BlitzCache will show about queries, you can use the below script to populate the plan cache with a variety of queries exhibiting different T-SQL anti-patterns:

    ```sql
    /*
      Using sp_BlitzCache to Find the Right Queries to Tune

      2021-02-12 - v1.1

      This demo requires:
      * Any supported version of SQL Server
      * Any Stack Overflow database: https://www.BrentOzar.com/go/querystack

      This script runs in 3-5 minutes. It creates & runs several stored procs to
      populate your plan cache with bad queries for sp_BlitzCache to see.
      */
      USE StackOverflow;
      GO
      EXEC sys.sp_configure N'cost threshold for parallelism', N'50' /* Keep small queries serial */
      GO
      EXEC sys.sp_configure N'max degree of parallelism', N'0' /* Let queries go parallel */
      GO
      RECONFIGURE
      GO
      ALTER DATABASE CURRENT SET COMPATIBILITY_LEVEL=150;
      GO
      SET NOCOUNT ON;
      GO
      DropIndexes;
      GO
      CREATE INDEX Reputation ON dbo.Users(Reputation);
      GO
      CREATE OR ALTER PROCEDURE dbo.usp_MissAnIndex @DisplayName NVARCHAR(40) ='Brent Ozar'
      AS
      SELECT COUNT_BIG(*) AS Records
      FROM dbo.Users AS u
      WHERE u.DisplayName=@DisplayName;
      GO
      CREATE OR ALTER PROCEDURE dbo.usp_MissingMissingIndex
      AS
      SELECT Location, COUNT(*) AS recs
      FROM dbo.Users u
      GROUP BY Location
      ORDER BY COUNT(*) DESC;
      GO
      CREATE OR ALTER PROCEDURE dbo.usp_MissACoupleIndexes @Location NVARCHAR(200) =N'Antarctica'
      AS
      SELECT p.Score, p.Title, c.Score, c.Text AS CommentText
      FROM dbo.Users u
      INNER JOIN dbo.Posts p ON u.Id = p.OwnerUserId
      INNER JOIN dbo.Comments c ON p.Id = c.PostId
      WHERE u.Location = @Location
      ORDER BY p.Score DESC, p.Title, c.Score DESC;
      GO
      CREATE OR ALTER PROCEDURE dbo.usp_CauseImplicitConversion @DisplayName SQL_VARIANT='Brent Ozar'
      AS BEGIN
          /*This proc will cause implicit conversion. The DisplayName is stored as NVARCHAR(40) in the Users table*/
          SELECT COUNT_BIG(*) AS Records
          FROM dbo.Users AS u
          WHERE u.DisplayName=@DisplayName;
      END;
      GO
      CREATE OR ALTER FUNCTION dbo.fn_ForceSerialScalarFunction(@Id INT)
      RETURNS INT
      WITH SCHEMABINDING, RETURNS NULL ON NULL INPUT
      AS BEGIN
          IF MONTH(GETDATE())>6 SET @Id=@Id+1;
          RETURN @Id;
      END;
      GO
      CREATE OR ALTER PROCEDURE dbo.usp_ForceSerialProc(@Id INT=26837)
      AS BEGIN
          DECLARE @idiot INT
          SELECT @idiot=dbo.fn_ForceSerialScalarFunction(u.Id)FROM dbo.Users AS u
      END;
      GO
      CREATE OR ALTER PROCEDURE dbo.usp_TableVariables(@Reputation INT=2)
      AS BEGIN
          DECLARE @Staging TABLE(Id INT NOT NULL);
          INSERT @Staging(Id)
          SELECT u.Id FROM dbo.Users AS u WHERE u.Reputation=@Reputation;
          SELECT * FROM @Staging AS c;
      END;
      GO
      CREATE OR ALTER PROCEDURE dbo.usp_ExpensiveSort(@Id INT=26837)
      AS BEGIN
          SELECT DENSE_RANK() OVER (PARTITION BY u.Age ORDER BY u.Reputation DESC, u.UpVotes DESC) AS ranker
          INTO #Staging
          FROM dbo.Users AS u
          WHERE u.Id>@Id;
      END;
      GO
      CREATE OR ALTER PROCEDURE dbo.usp_ExpensiveKeyLookup(@Reputation INT=2)
      AS BEGIN
          SELECT * FROM dbo.Users AS u WHERE u.Reputation=@Reputation;
      END;
      GO

      DBCC FREEPROCCACHE;
      GO
      EXEC usp_MissAnIndex;
      GO 3
      EXEC usp_MissingMissingIndex
      GO 3
      EXEC usp_CauseImplicitConversion;
      GO 3
      EXEC usp_TableVariables;
      GO 3
      EXEC usp_ExpensiveKeyLookup;
      GO 3
      EXEC usp_ForceSerialProc;
      GO
      EXEC usp_ExpensiveSort;
      GO
      EXEC usp_MissACoupleIndexes;
      GO

      /*
      Then, what's in your plan cache?
      Run this separately:

      EXEC sp_BlitzCache
      */

      /*
      License: Creative Commons Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0)
      More info: https://creativecommons.org/licenses/by-sa/3.0/

      You are free to:
      * Share - copy and redistribute the material in any medium or format
      * Adapt - remix, transform, and build upon the material for any purpose, even 
      commercially

      Under the following terms:
      * Attribution - You must give appropriate credit, provide a link to the license,
      and indicate if changes were made.
      * ShareAlike - If you remix, transform, or build upon the material, you must
      distribute your contributions under the same license as the original.
      */
    ```  

4. sp_BlitzIndex

   - Working with sp_BlitzFirst
     - Example 1
       
       <g>sp_BlitzFirst
         @Mode = 0

         This is the default. Returns prioritized findings based on the D.E.A.T.H method.

     - Example 2
       
       <g>sp_BlitzFirst
         @Mode = 2

         This is the Inventory of existing indexes, good for copy and pasting into Excel to work offline.

     - Example 3
       
       <g>sp_BlitzFirst
         @Mode = 3

         This is the Inventory of missing indexes. On 2019+ check out the sample query plan column.

     - Example 4
       
       <g>sp_BlitzFirst
         @Mode = 4

         Almost not use. Like mode 0, but returns more findings.

     - Example 5

       <g>sp_BlitzIndex
         @TableName = 'Users_columnstore'

       More info on the clases

   - Learn Note
    
      **On [Detail schema table ...] column we can pay attention to all that has a Est. benefit per day higer than a millon**
      **How many days a SQL should be up to analyze indexes? The amount of days that a cicle work is. Tipically is 1 month. Ofcourse that you can have queries that runs every 3, 6 months or a year**
      **PARAMETERS**
      **@SortOrder you can use with 'rows' or 'size' or 'writes'**

5. sp_BlitzLock

   - What it does?
      Analyze recent deadlocks, groups them together by table, query, app and login.

   - When to run it?
      When sp_Blitz warns you about a high number of deadlocks or when users complain about deadlocks. If not is not neccessary to run it.

   - Where data comes from?

      ![alt text](Images/image-10.png)

   - How to generate a Locks / Deadlock example

      ![alt text](Images/image-11.png)


   - Working with sp_BlitzFirst
     
     - Example 1

          <g>sp_BlitzLock

          <g>**How to work now? Start from the 3th result. 
          Checks the tables and SPs that are involve on the locks and tune them.
          Regarding Indexes respect the law of 5 x 5. Five index with 5 columns to give suppot to my queries.
          Regarding SPs you have to check that all the SPs that are involve on the locks works on the same order of tables. That means that the order on each SPs has to be the same. That is going to reduce the locks and deadlocks. It doesn't care if the order is alfabethic or any order but should be the same.**

   - Learn Note
      
      **https://www.mssqltips.com/sqlservertip/6456/improve-sql-server-extended-events-systemhealth-session/**


6. sp_BlitzWho
   
   - The result is order by time

   - Working with sp_BlitzFirst
     
     - Example 1
        
        <g>sp_BlitzWho
             @ExpertMode = 1

        Whit this parameter the result add plenty of columns!

        Column <r>**wait_info**</r> is the actual wait

        Column <r>**top_sessions_waits**</r> is the cumulative waits of all the query execution

7. sp_BlitzBackup

   - What is does?
      
      Analyze your MSDB backup tables.

   - **<r>Recovery Point Object (RPO)** worst Case, Minutes: How much data you would have lost if the SQL Server went down at the worst possible time.

   - **<r>Recovery Time Object (RTO)** Worst Case, Minutes: How long your restores might take if the SQL SErver went down at the worst possible time.

   - Working with sp_BlitzFirst
     
     - Example 1
        
        <g>sp_BlitzBackup

   - Learn Note
    
      - <r>RPO and RTO
       
       - <r>RPO = Recovery Point Objecive
       - <r>RTO = Recovery Time Objective
      
        https://www.brentozar.com/archive/2011/12/letters-that-get-dbas-fired/
        https://www.brentozar.com/archive/2015/09/why-rpo-and-rto-are-actually-performance-metrics-too/

8. sp_BlitzRestore

   - What is does?
      Restore a DB

   - Working with sp_BlitzFirst
     
     - Example 1

        <g>sp_BlitzRestore
          <g>@Database       = 'StackOverflow'

          <g>, @BakcupPathFull = 'Z:\MSSQL\BACKUP\FULL\...'

          <g>, @BakcupPathLog  = 'Z:\MSSQL\BACKUP\LOG\...'

          <g>, @TestRestore    = 1

          <g>, @RunCHECKDB     = 1

          <g>, @RunRecovery    = 1

          <g>, @Execute        = 'N'

        The problem is that we have to have all the files in the corresponding folders (FULL - LOG - DIFF)

   - Learn Note
    
      - Parameters
         
          @Database = source db name

          @RestoreDatabaseName = If you want to restore it under a different name

          @BakcupPathFull, Diff, Log = Where the BKP are

          @TestRestore = 1 to drop db whne the restore finishes

          @RunCHECKDB = 1

          @runRecovery = 1 otherwise more logs can be added

          @Execute = 'N' if you just want to generate scripts





## RECAP

  - Do a server-wide health check with sp_Blitz
  - Do a performance check with sp_BlitzFirst
  - Find the queries causing your top waits by using sp_BlitzCache's @SortOrder parameter
  - Check sp_BlitzIndex @GetAllDatabases = 1 to see if index changes can help a lot fast
  - The big picture. We have to see:
    - The priority 1-50 from sp_Blitz finding that scare you
    - Prioritized list of your top wait types
    - A list of the top 3-4 queries causing those waits
    - A rough idea of what tables need index help first



REVISSAR REVISAR ESTO QUE LO TENIA EN UN NOTEPAD

NOTES
	As a consultant he runs the script in hits way
	
		sp_Blitz 
			  @CheckServerInfo = 1
			, @CheckUserDatabaseObjects = 0
	
	Why 'cause @CheckServerInfo = 1 shows more data than the default
	
	Over the result we need to check all between Priority 1 and 49
	
	The he paid attention to Serveer Info seccion at the end of the result. He checks the machine and the resources. He wanna
	know is this is a VM or not, checks amount of CPUs, etc and also how many DBs are on the serveer and the sieze of these DBs.
	
	Finally it's a good idea to save the info into a table on DBA database. We can do this running 
		
		sp_Blitz
			@OutPutDatabaseName = 'DBA'
			, @OutPutSchemaName = 'dbo'
			, @OutPutTableName = 'spBlitzFirst'
	
	This table will have the ID, ServerName and also CheckDate.
	Whit this option we can centralize the info in only one server and then create reports, warning, etc
	Import this result everymotnh it's a good idea to validate what did you do during the year. If in January did you have 250
	Priority one then in Jun you sloud have less than that number.
	
	WARNING
		@CheckUserDatabaseObjects = 0,  check if I need to enable or not. If we are on charge of system database we should if not we
										don't. Check the result and compared between 0 an d 1
	
	
	sp_BlitzFirst
		We can runn n tthis without parameters andis gonna take 5 seconds. Thi is 'cause the script execute, take values, wait
		5 seconds and takes other snapshot and compared the results
	
		This sp could return "No Problems Found"
		
		We need to be SYSADMIN to run all scripts. there is a way in which we can create a certificate, create a log and user
		for that certificate and the execute the SP
		
		sp_BlitzFirst
			  @ExpertMode = 1
			, @Seconds = 60
		
			@ExpertMode parameter show the snapshot that we talked before.
			@Seconds run the snapshot, wait for 60 seconds and the take the other snapshot
		
		
		spBlitzFirst
			@SinceStartUp = 1
			
			With this parameter we assume that the the first snapshot is 0 (cero)
			
			The most important part of the result is the WAITS. Insithe of this the columns are:
			
				Hours Sample        = Amount of hours that SQL Server it has been running.
				Thread Time (Hours) = Amount of hours that we spent running queries
				Wait Time (Hours)   = Amount of hours that we have been waiting	on that wait
				
				e.g. Hours Sample		Thread Time (Hours)		wait_Type		Wait Time (Hours)
					 141.0				53.0					PAGEIOLATCH_SH	14.8
					 
				This means that SQL has been running for 141 hours, running queries for 53 hours and waiting for 14.8 hours
				in PAGEIOLATCH_SH.
				
			The wait stats cheat sheet:

			CXPACKET/CXCONSUMER/LATCH_EX: queries going parallel to read a lot of data or do a lot of CPU work. Sort by CPU and by READS.
			LCK%: locking, so look for long-running queries. Sort by DURATION, and look for the warning of "Long Running, Low CPU." That's probably a query being blocked.
			PAGEIOLATCH: reading data pages that aren't cached in RAM. Sort by READS.
			RESOURCE_SEMAPHORE: queries can't get enough workspace memory to start running. Sort by MEMORY GRANT, although that isn't available in older versions of SQL.
			SOS_SCHEDULER_YIELD: CPU pressure, so sort by CPU.
			WRITELOG: writing to the transaction log for delete/update/insert (DUI) work. Sort by WRITES.	
